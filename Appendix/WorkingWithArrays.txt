Underscore helpful methods for manipulating Arrays:
*  Extracting elements from Arrays by position:
    _(arr).first() <-- get first element from array
    _(arr).first(3) <-- get first 3 elements from array
    _(arr).last() <-- get last element from array
    _(arr).last(3) <-- get last 3 elements from array
    _(arr).initial() <-- all but the last element
    _(arr).initial(3) <-- all but the last element three elements
    _(arr).rest() <--  all but the first element
    _(arr).rest(3) <--  all but the first 3 elements
* Combining Arrays:
    _(arr1).union(arr2, arr3, ..) <-- returns an array containing all elements that are in any of the arrays, and it removes any duplicates.
    _(arr1).intersection(arr2, arr3, ..) <-- returns an array containing all elements that are in all of the arrays.
    _(arr1).difference(arr2, arr3, ..) <-- returns only those elements of the arr1 that do not present in other arrays.
    _(arr).uniq() <-- Returns an array without duplicates
    _zip(arr1, arr2) <-- pairs elements from multiple arrays together into a single array (result is array of pairs)
* Removing Invalid Data Values:
    _(arr).compact() <-- Eliminates boolean value false, the numeric value 0, an empty string, and the special values NaN (not a number, for example 1/0) and undefined
    _(arr).flatten() <-- Removes extra nesting levels from a dataset (takes true/false as an argument for shallow flattening)
    _(arr).without(x,y) <-- Removes unwanted elements from the dataset
* Finding Elements in an Array:
    _(arr).indexOf(x) Note: IE8 does not support native indexOf method.
    _(arr).indexOf(x, index) <-- Begins searching starting from the index specified.
    _(arr).lastIndexOf(x) Begins searching backwards from the end.
    _(arr).sortedIndex(x) <-- Returns the position at which this element should be inserted (provided arr is a sorted array)
* Generating Arrays:
    _().range(length) <-- Creates an array with a specified number of elements.
    
    
    
    
    
    
    
